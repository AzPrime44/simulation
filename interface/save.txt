
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Simulator extends JFrame {
   private JPanel leftPanel;
   private JPanel rightPanel;
   private JLabel emeteurLabel;
   private JLabel recepteurLabel;
   private JLabel fibreLabel;

   public Simulator() {
      // Configuration de la fenêtre principale
      setTitle("Interface Graphique");
      setSize(800, 600);
      // setLayout(new GridLayout(1, 2));
      setLayout(new BorderLayout());
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      // Création des panneaux gauche et droit
      leftPanel = new JPanel();
      leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
      leftPanel.setPreferredSize(new Dimension(getWidth() / 4, getHeight()));

      rightPanel = new JPanel();
      rightPanel.setLayout(null);

      // Ajout d'une bordure pour séparer les deux parties de l'interface
      leftPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, Color.BLACK));

      // Création des labels
      emeteurLabel = new JLabel("Emeteur");
      recepteurLabel = new JLabel("Recepteur");
      fibreLabel = new JLabel("Fibre de connexion");

      // Ajout des labels au panneau gauche
      leftPanel.add(emeteurLabel);
      leftPanel.add(recepteurLabel);
      leftPanel.add(fibreLabel);

      // Ajout des panneaux à la fenêtre principale
      add(leftPanel, BorderLayout.WEST);
      add(rightPanel, BorderLayout.CENTER);

      // Ajout des écouteurs d'événements pour le glisser-déposer
      LabelMouseAdapter adapter = new LabelMouseAdapter();
      emeteurLabel.addMouseListener(adapter);
      emeteurLabel.addMouseMotionListener(adapter);
      recepteurLabel.addMouseListener(adapter);
      recepteurLabel.addMouseMotionListener(adapter);
      fibreLabel.addMouseListener(adapter);
      fibreLabel.addMouseMotionListener(adapter);
   }

   private class LabelMouseAdapter extends MouseAdapter {
      private int x;
      private int y;

      @Override
      public void mousePressed(MouseEvent e) {
         // Enregistrement de la position initiale du label
         x = e.getX();
         y = e.getY();
      }

      @Override
      public void mouseReleased(MouseEvent e) {
         // Création d'un nouveau label dans le panneau droit
         JLabel label = new JLabel(((JLabel) e.getSource()).getText());
         label.setBounds(e.getXOnScreen() - getLocationOnScreen().x - x - leftPanel.getWidth(),
               e.getYOnScreen() - getLocationOnScreen().y - y - getInsets().top, 50, 50);
         label.setBorder(BorderFactory.createLineBorder(Color.BLACK));
         rightPanel.add(label);
         rightPanel.repaint();
         rightPanel.revalidate();
      }

      @Override
      public void mouseDragged(MouseEvent e) {
         // Mise à jour de la position du label pendant le glissement
         e.getComponent().setLocation(e.getXOnScreen() - getLocationOnScreen().x - x,
               e.getYOnScreen() - getLocationOnScreen().y - y);
         rightPanel.repaint();
         rightPanel.revalidate();
      }
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            new Simulator().setVisible(true);
         }
      });
   }
}



         // Création de la ligne et enregistrement des composants emetteur et recepteur
         Ligne ligne = new Ligne(Color.BLACK);
         ligne.setStart(emetteur.getX() + emetteur.getWidth() / 2, emetteur.getY() + emetteur.getHeight() / 2);
         ligne.setEnd(recepteur.getX() + recepteur.getWidth() / 2, recepteur.getY() + recepteur.getHeight() / 2);
         emetteur.addPropertyChangeListener("location", evt -> {
            // Mise à jour de la position de départ de la ligne si le composant emetteur
            // bouge
            JLabel tmp = ((JLabel) evt.getSource());
            ligne.setStart(tmp.getX() + tmp.getWidth() / 2, tmp.getY() + tmp.getHeight() / 2);
            ligne.repaint();
         });
         recepteur.addPropertyChangeListener("location", evt -> {
            // Mise à jour de la position de fin de la ligne si le composant recepteur bouge
            JLabel tmp = ((JLabel) evt.getSource());
            ligne.setEnd(tmp.getX() + tmp.getWidth() / 2, tmp.getY() + tmp.getHeight() / 2);
            ligne.repaint();
            rightPanel.add(ligne);
            rightPanel.repaint();
         });